require 'jdbc_common'
require 'db/db2'

class DB2SimpleTest < Test::Unit::TestCase
  include SimpleTestMethods

  # For backwards compatibility with how the DB2 code in
  # jdbc_adapter 0.9.x handled booleans.
  #
  # The old DB2 jdbc_db2.rb driver was broken enough that
  # applications were exposed to the underlying type (was DECIMAL)
  # and used 0 and 1 as false and true, respectively.
  #
  # This driver now uses SMALLINT as a boolean, and properly
  # type cast's it to a Ruby boolean. Need to make sure we don't
  # break existing apps!
  def test_boolean_as_integer
    e = DbType.find(:first)

    # true
    e.sample_boolean = 1
    assert_equal true, e.sample_boolean
    assert_equal true, e.sample_boolean?
    e.save!

    e = DbType.find(:first)
    assert_equal true, e.sample_boolean
    assert_equal true, e.sample_boolean?

    # false
    e.sample_boolean = 0
    assert_equal false, e.sample_boolean
    assert_equal false, e.sample_boolean?
    e.save!

    e = DbType.find(:first)
    assert_equal false, e.sample_boolean
    assert_equal false, e.sample_boolean?
  end
end

class DB2HasManyThroughTest < Test::Unit::TestCase
  include HasManyThroughMethods
end

class DB2Test < Test::Unit::TestCase
  
  def setup
    @adapter = Object.new
    def @adapter.zos?; false; end
    @adapter.extend ArJdbc::DB2
    
    @column = Object.new
    class << @column
      attr_accessor :type
    end
  end

  def test_quote_decimal
    adapter, column = new_adapter_stub, new_column_stub
    assert_equal %q{'123.45'}, adapter.quote("123.45")
    column.type = :decimal
    assert_equal %q{123.45}, adapter.quote("123.45", column), "decimal columns should not have quotes"
  end

  def test_primary_key_generation
    adapter = new_adapter_stub
    assert_equal 'int not null generated by default as identity (start with 1) primary key', 
      adapter.modify_types({:string => {}, :integer => {}, :boolean => {}})[:primary_key]
  end
  
  def test_select_schema
    url = 'jdbc:as400://localhost/schema;naming=system;libraries=lib1,lib2'
    assert_equal 'schema', new_adapter_stub(:url => url).send(:db2_schema)
    
    url = 'jdbc:as400://127.0.0.1/SCHEMA1 '
    assert_equal 'SCHEMA1', new_adapter_stub(:url => url).send(:db2_schema)
    
    url = 'jdbc:as400://127.0.0.1/SCHEMA2;'
    assert_equal 'SCHEMA2', new_adapter_stub(:url => url).send(:db2_schema)

    assert_equal nil, new_adapter_stub(:jndi => 'java:comp/env/DB2DS').send(:db2_schema)
    
    config = { :host => 'localhost', :username => 'db2inst1' }
    assert_equal 'db2inst1', new_adapter_stub(config).send(:db2_schema)
  end
  
  private
  
  def new_adapter_stub(config = nil)
    adapter = Object.new
    def adapter.zos?; false; end
    adapter.extend ArJdbc::DB2
    adapter.instance_variable_set :@config, config if config
    adapter
  end

  def new_column_stub
    column = Object.new
    class << column
      attr_accessor :type
    end
    column
  end
  
end
